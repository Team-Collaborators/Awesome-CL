[
  {
    "title": "Unit Tests for User Registration, Login, Email Verification, and Protected Routes",
    "description": "This group contains test suites to validate the functionality of user registration, login, email verification, and access to protected routes. It ensures the application behaves as expected when handling authentication, authorization, and rate limiting.",
    "controllers": [
      {
        "title": "User Registration Tests",
        "description": "This suite of tests validates the user registration flow, including successful registration, validation errors for missing fields, and handling duplicate users.",
        "code": "const mongoose = require('mongoose');\nconst request = require('supertest');\nconst bcrypt = require('bcryptjs');\nconst app = require('../server');\nconst User = require('../models/User');\n\nbeforeEach(async () => {\n  await User.deleteMany({});\n});\n\nafterAll(async () => {\n  await mongoose.connection.close();\n});\n\ndescribe('User Registration', () => {\n  it('Should send a verification email upon registration', async () => {\n    const res = await request(app).post('/api/users/register').send({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: 'password123',\n    });\n\n    expect(res.statusCode).toEqual(200);\n    expect(res.body).toHaveProperty('message', 'Verification email sent. Please check your email.');\n  });\n\n  it('Should return validation error if required fields are missing', async () => {\n    const res = await request(app).post('/api/users/register').send({\n      email: 'testuser@example.com',\n    });\n\n    expect(res.statusCode).toEqual(400);\n    expect(res.body).toHaveProperty('message', 'Name is required');\n  });\n\n  it('Should not allow registration if email already exists', async () => {\n    await User.create({\n      name: 'Existing User',\n      email: 'existing@example.com',\n      password: await bcrypt.hash('password123', 10),\n    });\n\n    const res = await request(app).post('/api/users/register').send({\n      name: 'Another User',\n      email: 'existing@example.com',\n      password: 'password123',\n    });\n\n    expect(res.statusCode).toEqual(400);\n    expect(res.body).toHaveProperty('message', 'User already exists');\n  });\n});",
        "language": "javascript"
      },
      {
        "title": "User Login Tests",
        "description": "This test suite validates the login process, checking for valid credentials, handling unverified users, and verifying incorrect credentials scenarios.",
        "code": "describe('User Login', () => {\n  it('Should allow login with valid credentials for verified user', async () => {\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    await User.create({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: hashedPassword,\n      isVerified: true,\n    });\n\n    const res = await request(app).post('/api/users/login').send({\n      email: 'testuser@example.com',\n      password: 'password123',\n    });\n\n    expect(res.statusCode).toEqual(200);\n    expect(res.body).toHaveProperty('token');\n  });\n\n  it('Should not allow login with incorrect credentials', async () => {\n    const res = await request(app).post('/api/users/login').send({\n      email: 'testuser@example.com',\n      password: 'wrongpassword',\n    });\n\n    expect(res.statusCode).toEqual(401);\n    expect(res.body).toHaveProperty('message', 'Invalid email or password');\n  });\n\n  it('Should not allow login for unverified user', async () => {\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    await User.create({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: hashedPassword,\n      isVerified: false,\n    });\n\n    const res = await request(app).post('/api/users/login').send({\n      email: 'testuser@example.com',\n      password: 'password123',\n    });\n\n    expect(res.statusCode).toEqual(401);\n    expect(res.body).toHaveProperty('message', 'Please verify your account before logging in.');\n  });\n});",
        "language": "javascript"
      },
      {
        "title": "Email Verification Tests",
        "description": "Tests to validate the email verification process, including successful verification and handling invalid or expired tokens.",
        "code": "describe('Email Verification', () => {\n  it('Should verify email and activate user account', async () => {\n    await User.create({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: await bcrypt.hash('password123', 10),\n      isVerified: false,\n    });\n\n    const verificationToken = jwt.sign({ email: 'testuser@example.com' }, process.env.JWT_SECRET, {\n      expiresIn: '1d',\n    });\n\n    const res = await request(app).get(`/api/users/verify-email/${verificationToken}`);\n\n    expect(res.statusCode).toEqual(201);\n    expect(res.body).toHaveProperty('message', 'Account successfully verified');\n  });\n\n  it('Should return error for invalid or expired token', async () => {\n    const res = await request(app).get(`/api/users/verify-email/invalid-token`);\n\n    expect(res.statusCode).toEqual(400);\n    expect(res.body).toHaveProperty('message', 'Invalid or expired token');\n  });\n});",
        "language": "javascript"
      },
      {
        "title": "Protected Routes Tests",
        "description": "This suite tests access to protected routes, including user profile access and service request creation. It validates token-based authentication and role-based authorization.",
        "code": "describe('Protected Routes', () => {\n  it('Should return 401 if no token is provided when accessing profile', async () => {\n    const res = await request(app).get('/api/users/profile');\n\n    expect(res.statusCode).toEqual(401);\n    expect(res.body).toHaveProperty('message', 'Not authorized, no token');\n  });\n\n  it('Should return user profile if valid token is provided', async () => {\n    const user = await User.create({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: await bcrypt.hash('password123', 10),\n      isVerified: true,\n    });\n\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: '1d',\n    });\n\n    const res = await request(app)\n      .get('/api/users/profile')\n      .set('Authorization', `Bearer ${token}`);\n\n    expect(res.statusCode).toEqual(200);\n    expect(res.body).toHaveProperty('name', 'Test User');\n  });\n\n  it('Should return 401 when creating a service request without token', async () => {\n    const res = await request(app).post('/api/services').send({\n      serviceType: 'Cleaning',\n      date: '2024-09-12',\n      time: '10:00',\n      address: '123 Test St',\n      notes: 'General cleaning',\n    });\n\n    expect(res.statusCode).toEqual(401);\n    expect(res.body).toHaveProperty('message', 'Not authorized, no token');\n  });\n\n  it('Should create service request with valid token', async () => {\n    const user = await User.create({\n      name: 'Test User',\n      email: 'testuser@example.com',\n      password: await bcrypt.hash('password123', 10),\n      isVerified: true,\n    });\n\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: '1d',\n    });\n\n    const res = await request(app)\n      .post('/api/services')\n      .set('Authorization', `Bearer ${token}`)\n      .send({\n        serviceType: 'Cleaning',\n        date: '2024-09-12',\n        time: '10:00',\n        address: '123 Test St',\n        notes: 'General cleaning',\n      });\n\n    expect(res.statusCode).toEqual(201);\n    expect(res.body).toHaveProperty('serviceType', 'Cleaning');\n  });\n});",
        "language": "javascript"
      },
      {
        "title": "Rate Limiting Tests",
        "description": "Tests to ensure that rate limiting is applied, blocking repeated login attempts after a threshold is reached.",
        "code": "describe('Rate Limiting', () => {\n  it('Should block login after 5 failed attempts', async () => {\n    for (let i = 0; i < 5; i++) {\n      await request(app).post('/api/users/login').send({\n        email: 'nonexistent@example.com',\n        password: 'wrongpassword',\n      });\n    }\n\n    const res = await request(app).post('/api/users/login').send({\n      email: 'nonexistent@example.com',\n      password: 'wrongpassword',\n    });\n\n    expect(res.statusCode).toEqual(429);\n    expect(res.body).toHaveProperty('message', 'Too many login attempts, please try again later');\n  });\n});",
        "language": "javascript"
      },
      {
        "title": "CORS Protection Tests",
        "description": "Tests to validate that CORS protection is correctly implemented, blocking disallowed origins and allowing permitted ones.",
        "code": "describe('CORS Protection', () => {\n  it('Should allow requests from the allowed origin', async () => {\n    const res = await request(app)\n      .get('/api/users/login')\n      .set('Origin', process.env.ALLOWED_ORIGINS || process.env.FRONTEND_URL);\n\n    expect(res.statusCode).toEqual(403);\n  });\n\n  it('Should block requests from disallowed origin', async () => {\n    const res = await request(app)\n      .get('/api/users/login')\n      .set('Origin', 'http://malicious-site.com');\n\n    expect(res.statusCode).toEqual(403);\n    expect(res.body).toHaveProperty('message', 'Not allowed by CORS');\n  });\n});",
        "language": "javascript"
      }
    ]
  }
]