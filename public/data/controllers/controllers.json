[
    {
        "title": "Service Validation",
        "description": "This validation middleware ensures that the service request contains valid data before proceeding. It checks that the 'serviceType' is provided, the 'date' is a valid ISO8601 date, the 'time' is provided, and the 'address' has a minimum length of 10 characters.",
        "code": "import { check } from 'express-validator';\n\nconst validateServiceRequest = [\n  check('serviceType').notEmpty().withMessage('Service type is required'),\n  check('date').isISO8601().withMessage('Please provide a valid date'),\n  check('time').notEmpty().withMessage('Time is required'),\n  check('address').isLength({ min: 10 }).withMessage('Address must be at least 10 characters long'),\n];\n\nexport { validateServiceRequest };",
        "language": "javascript"
    },
    {
        "title": " Service Requests (Admin Only)",
        "description": "This function allows admins to retrieve all service requests. It checks if the requesting user has admin privileges. If authorized, it fetches all service requests from the database and populates user information (name and email).",
        "code": "import { find } from '../../models/ServiceRequest';\n\nconst getServiceRequests = async (req, res, next) => {\n  try {\n    if (req.user.role !== 'admin') {\n      const error = new Error('Not authorized to access this resource');\n      error.statusCode = 403;\n      throw error;\n    }\n\n    const serviceRequests = await find().populate('user', 'name email');\n    res.json(serviceRequests);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport { getServiceRequests };",
        "language": "javascript"
    },
    {
        "title": "User Registration, Validation",
        "description": "This code handles user registration by validating the input, checking if the user already exists, hashing the password, saving the user in the database, generating a JWT token for email verification, and sending a verification email. The `validateRegister` function ensures the name, email, and password are valid before proceeding with the registration.",
        "code": "import { check, validationResult } from 'express-validator';\nimport User from '../../models/User';\nimport jwt from 'jsonwebtoken';\nimport sendEmail from '../../utils/sendEmail';\nimport bcrypt from 'bcryptjs';\n\nconst generateToken = (email) => {\n  return jwt.sign({ email }, process.env.JWT_SECRET, {\n    expiresIn: '1d',\n  });\n};\n\nconst validateRegister = [\n  check('name').notEmpty().withMessage('Name is required'),\n  check('email').isEmail().withMessage('Please provide a valid email'),\n  check('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters long'),\n];\n\nconst registerUser = async (req, res, next) => {\n  try {\n    const { name, email, password } = req.body;\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      const error = new Error(errors.array()[0].msg);\n      error.statusCode = 400;\n      throw error;\n    }\n\n    const userExists = await User.findOne({ email });\n    if (userExists) {\n      const error = new Error('User already exists');\n      error.statusCode = 400;\n      throw error;\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({ name, email, password: hashedPassword });\n    await newUser.save();\n\n    const verificationToken = generateToken(email);\n    const verificationUrl = `${req.protocol}://${req.get('host')}/api/users/verify-email/${verificationToken}`;\n    const message = `Hello ${name},\\n\\nPlease verify your account by clicking the following link:\\n\\n${verificationUrl}\\n\\nThank you,\\nCleaning Service`;\n\n    await sendEmail({ email, subject: 'Account Verification - Cleaning Service', message });\n    res.status(200).json({ message: 'Verification email sent. Please check your email.' });\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport { registerUser, validateRegister };",
        "language": "javascript"
    },
    {
        "title": "User Login, JWT",
        "description": "This function handles the login process by validating the user's credentials (email and password), checking if the user has verified their email, and generating a JWT token. The token includes the user's ID, role, and email, and is valid for 1 hour. If the login is successful, the function returns the user's details and the token to the client.",
        "code": "import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\n\nconst generateToken = (user) => {\n  return jwt.sign({ id: user._id, role: user.role, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1h' });\n};\n\nconst loginUser = async (req, res, next) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ email });\n    if (!user) {\n      const error = new Error('Invalid email or password');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    if (!(await user.matchPassword(password))) {\n      const error = new Error('Invalid email or password');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    if (!user.isVerified) {\n      const error = new Error('Please verify your account before logging in.');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    res.json({ _id: user._id, name: user.name, email: user.email, role: user.role, token: generateToken(user) });\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport default loginUser;",
        "language": "javascript"
    },
    {
        "title": "Get User",
        "description": "This function retrieves the profile details of the authenticated user. It uses the user ID stored in `req.user._id`, which is placed in the request object by a protection middleware (e.g., after verifying a JWT token). The function returns the user's details, excluding the password. If the user is not found, a 404 error is thrown.",
        "code": "import User from '../../models/User';\n\nconst getUserProfile = async (req, res, next) => {\n  try {\n    const user = await User.findById(req.user._id);\n    if (!user) {\n      const error = new Error('User not found');\n      error.statusCode = 404;\n      throw error;\n    }\n    res.json({ _id: user._id, name: user.name, email: user.email, isVerified: user.isVerified });\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport default getUserProfile;",
        "language": "javascript"
    },
    {
        "title": "Verify Email",
        "description": "This function verifies a user's email after registration. It decodes the JWT token passed through the URL, checks if the user exists, and if they are not already verified, marks their account as verified. If the token is invalid or expired, an appropriate error is returned.",
        "code": "import User from '../../models/User';\nimport jwt from 'jsonwebtoken';\n\nconst verifyEmail = async (req, res, next) => {\n  try {\n    const decoded = jwt.verify(req.params.token, process.env.JWT_SECRET);\n    const user = await User.findOne({ email: decoded.email });\n    if (!user) {\n      const error = new Error('User not found');\n      error.statusCode = 400;\n      throw error;\n    }\n    if (user.isVerified) {\n      const error = new Error('User is already verified');\n      error.statusCode = 400;\n      throw error;\n    }\n    user.isVerified = true;\n    await user.save();\n    res.status(201).json({ message: 'Account successfully verified' });\n  } catch (error) {\n    if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {\n      return res.status(400).json({ message: 'Invalid or expired token' });\n    }\n    next(error);\n  }\n};\n\nexport default verifyEmail;",
        "language": "javascript"
    }
]