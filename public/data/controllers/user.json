[
    {
        "title": "User Registration and Validation",
        "description": "This code handles user registration by validating the input, checking if the user already exists, hashing the password, saving the user in the database, generating a JWT token for email verification, and sending a verification email. The `validateRegister` function ensures the name, email, and password are valid before proceeding with the registration.",
        "code": "import { check, validationResult } from 'express-validator'; // Import validation middleware\nimport User from '../../models/User'; // Import the User model\nimport jwt from 'jsonwebtoken'; // Import JWT for token generation\nimport sendEmail from '../../utils/sendEmail'; // Import email utility\nimport bcrypt from 'bcryptjs'; // Import bcrypt for password hashing\n\n// Generate JWT token for email verification\nconst generateToken = (email) => {\n  return jwt.sign({ email }, process.env.JWT_SECRET, {\n    expiresIn: '1d', // Token expires in 1 day\n  });\n};\n\n// Validation rules for user registration\nconst validateRegister = [\n  check('name').notEmpty().withMessage('Name is required'),\n  check('email').isEmail().withMessage('Please provide a valid email'),\n  check('password')\n    .isLength({ min: 6 })\n    .withMessage('Password must be at least 6 characters long'),\n];\n\n// Function to handle user registration\nconst registerUser = async (req, res, next) => {\n  try {\n    const { name, email, password } = req.body;\n\n    // Check for validation errors\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      const error = new Error(errors.array()[0].msg);\n      error.statusCode = 400;\n      throw error;\n    }\n\n    // Check if user already exists\n    const userExists = await User.findOne({ email });\n    if (userExists) {\n      const error = new Error('User already exists');\n      error.statusCode = 400;\n      throw error;\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create a new user\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n\n    // Save the user to the database\n    await newUser.save();\n\n    // Generate a token for email verification\n    const verificationToken = generateToken(email);\n\n    // Generate the verification URL\n    const verificationUrl = `${req.protocol}://${req.get('host')}/api/users/verify-email/${verificationToken}`;\n\n    // Email message content\n    const message = `Hello ${name},\\n\\nPlease verify your account by clicking the following link:\\n\\n${verificationUrl}\\n\\nThank you,\\nCleaning Service`;\n\n    // Send verification email\n    await sendEmail({\n      email,\n      subject: 'Account Verification - Cleaning Service',\n      message,\n    });\n\n    // Respond with a success message\n    res.status(200).json({ message: 'Verification email sent. Please check your email.' });\n  } catch (err) {\n    next(err); // Pass errors to the error-handling middleware\n  }\n};\n\nexport { registerUser, validateRegister };",
        "language": "javascript"
      },
      {
        "title": "User Login and JWT Generation",
        "description": "This function handles the login process by validating the user's credentials (email and password), checking if the user has verified their email, and generating a JWT token. The token includes the user's ID, role, and email, and is valid for 1 hour. If the login is successful, the function returns the user's details and the token to the client.",
        "code": "import User from '../../models/User'; // Import User model\nimport jwt from 'jsonwebtoken'; // Import JWT for token generation\n\n/**\n * Function to generate a JWT token for a logged-in user.\n * The token includes the user's ID, role, and email.\n * The token expires in 1 hour.\n */\nconst generateToken = (user) => {\n  return jwt.sign(\n    {\n      id: user._id,         // User ID\n      role: user.role,      // User role\n      email: user.email     // User email\n    },\n    process.env.JWT_SECRET, // Secret key from environment variables\n    { expiresIn: '1h' }     // Token expires in 1 hour\n  );\n};\n\n/**\n * Function to handle user login.\n * This checks the user's email and password, verifies if the user is verified,\n * and returns a JWT token if successful.\n */\nconst loginUser = async (req, res, next) => {\n  try {\n    const { email, password } = req.body;\n\n    // Check if the user exists\n    const user = await User.findOne({ email });\n    if (!user) {\n      const error = new Error('Invalid email or password');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    // Compare the provided password with the stored password\n    if (!(await user.matchPassword(password))) {\n      const error = new Error('Invalid email or password');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    // Check if the user has verified their email\n    if (!user.isVerified) {\n      const error = new Error('Please verify your account before logging in.');\n      error.statusCode = 401;\n      throw error;\n    }\n\n    // Send user details and a JWT token back to the client\n    res.json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      token: generateToken(user),\n    });\n  } catch (err) {\n    next(err); // Pass the error to the error handling middleware\n  }\n};\n\nexport default loginUser;",
        "language": "javascript"
      },
      {
        "title": "Get User Profile",
        "description": "This function retrieves the profile details of the authenticated user. It uses the user ID stored in `req.user._id`, which is placed in the request object by a protection middleware (e.g., after verifying a JWT token). The function returns the user's details, excluding the password. If the user is not found, a 404 error is thrown.",
        "code": "import User from '../../models/User'; // Import the User model\n\n/**\n * Function to get the authenticated user's profile.\n * The authentication has already been verified in the middleware `protect`.\n */\nconst getUserProfile = async (req, res, next) => {\n  try {\n    // Find the user by their ID, which is stored in `req.user._id`\n    const user = await User.findById(req.user._id);\n\n    // If the user is not found, throw an error\n    if (!user) {\n      const error = new Error('User not found');\n      error.statusCode = 404;\n      throw error;\n    }\n\n    // Return the user's details, excluding the password\n    res.json({\n      _id: user._id,\n      name: user.name,\n      email: user.email,\n      isVerified: user.isVerified,\n    });\n  } catch (err) {\n    next(err); // Pass the error to the error handling middleware\n  }\n};\n\nexport default getUserProfile;",
        "language": "javascript"
      },
      {
        "title": "Verify User Email",
        "description": "This function verifies a user's email after registration. It decodes the JWT token passed through the URL, checks if the user exists, and if they are not already verified, marks their account as verified. If the token is invalid or expired, an appropriate error is returned.",
        "code": "import User from '../../models/User'; // Import the User model\nimport jwt from 'jsonwebtoken'; // Import JWT to decode the verification token\n\n/**\n * Function to verify the user's email.\n * The token is passed through the URL, decoded using the JWT secret, \n * and the user is marked as verified if the token is valid and the user exists.\n */\nconst verifyEmail = async (req, res, next) => {\n  try {\n    // Decode the token from the URL parameter using JWT\n    const decoded = jwt.verify(req.params.token, process.env.JWT_SECRET);\n\n    // Find the user by the email decoded from the token\n    const user = await User.findOne({ email: decoded.email });\n\n    if (!user) {\n      const error = new Error('User not found');\n      error.statusCode = 400;\n      throw error;\n    }\n\n    // If the user is already verified, throw an error\n    if (user.isVerified) {\n      const error = new Error('User is already verified');\n      error.statusCode = 400;\n      throw error;\n    }\n\n    // Mark the user as verified\n    user.isVerified = true;\n    await user.save();\n\n    // Respond with a success message\n    res.status(201).json({ message: 'Account successfully verified' });\n  } catch (error) {\n    // Handle JWT errors like invalid or expired token\n    if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {\n      return res.status(400).json({ message: 'Invalid or expired token' });\n    }\n    // Pass other errors to the error-handling middleware\n    next(error);\n  }\n};\n\nexport default verifyEmail;",
        "language": "javascript"
      },
      {
        "title": "Service Request Validation",
        "description": "This validation middleware ensures that the service request contains valid data before proceeding. It checks that the 'serviceType' is provided, the 'date' is a valid ISO8601 date, the 'time' is provided, and the 'address' has a minimum length of 10 characters.",
        "code": "import { check } from 'express-validator'; // Import validation middleware\n\n/**\n * Validation rules for creating a service request.\n * This ensures that the 'serviceType', 'date', 'time', and 'address' fields are valid.\n */\nconst validateServiceRequest = [\n  // Validate that 'serviceType' is not empty\n  check('serviceType').notEmpty().withMessage('Service type is required'),\n\n  // Validate that 'date' is a valid ISO8601 date\n  check('date').isISO8601().withMessage('Please provide a valid date'),\n\n  // Validate that 'time' is not empty\n  check('time').notEmpty().withMessage('Time is required'),\n\n  // Validate that 'address' has a minimum length of 10 characters\n  check('address').isLength({ min: 10 }).withMessage('Address must be at least 10 characters long'),\n];\n\nexport { validateServiceRequest };",
        "language": "javascript"
    },
    {
        "title": "Retrieve All Service Requests (Admin Only)",
        "description": "This function allows admins to retrieve all service requests. It checks if the requesting user has admin privileges. If authorized, it fetches all service requests from the database and populates user information (name and email).",
        "code": "import { find } from '../../models/ServiceRequest'; // Import service request model\n\n/**\n * Function to get all service requests.\n * This function is only accessible by admins. It retrieves all service requests from the database.\n */\nconst getServiceRequests = async (req, res, next) => {\n  try {\n    // Check if the user has admin permissions\n    if (req.user.role !== 'admin') {\n      const error = new Error('Not authorized to access this resource');\n      error.statusCode = 403;\n      throw error; // Throw the authorization error\n    }\n\n    // Retrieve all service requests from the database, populating user information (name and email)\n    const serviceRequests = await find().populate('user', 'name email');\n\n    // Return the list of service requests\n    res.json(serviceRequests);\n  } catch (err) {\n    next(err); // Pass the error to the error handling middleware\n  }\n};\n\nexport { getServiceRequests };",
        "language": "javascript"
    }  
]
